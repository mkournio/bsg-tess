import numpy as np
import os
import gc
from paths import *
from LPT_plotting import *
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit

params = {'legend.fontsize': 10,
	 'font.size':  14,
         'axes.labelsize': 7,
         'axes.titlesize': 11,
         'xtick.labelsize': 12,
         'ytick.labelsize': 12}
plt.rcParams.update(params)

file_fold = os.listdir(TESS_FREQ_PATH)
data = ascii.read('LaPlata_input')
data['RA'], data['DEC'] = to_deg(data['RA'],data['DEC'])

def freq_type(data,t):
	
	fund=[]; harmon=[]; comb=[]; unres=[]

	for star, ident in zip(data['STAR'],data['TCATG']):

  	   if ident == t:	
		star_files = [j for j in file_fold if (star in j) and ('FREQ' in j) and ('PL' not in j)]
		if len(star_files) > 0 :
			
			s_fund=[]; s_harmon=[]; s_comb=[]; s_unres=[]; 

			for s in star_files :
				with open(TESS_FREQ_PATH+s) as f:

					for line in f:

						freq = float(line.split()[1])

						if '(F)' in line:
							s_fund.append(freq)
							#if freq > 0.43 and ident == 'eB' : print star
						elif '(H)' in line:
							s_harmon.append(freq)
						elif '(C)' in line:
							s_comb.append(freq)
						elif '(U)' in line:
							s_unres.append(freq)
				f.close()

			for k in set(np.digitize(s_fund,bins)):
				mask = np.digitize(s_fund,bins) == k
				fund.append(np.mean([x for x,y in zip(s_fund,mask) if y]))
			for k in set(np.digitize(s_harmon,bins)):
				mask = np.digitize(s_harmon,bins) == k
				harmon.append(np.mean([x for x,y in zip(s_harmon,mask) if y]))
			for k in set(np.digitize(s_comb,bins)):
				mask = np.digitize(s_comb,bins) == k
				comb.append(np.mean([x for x,y in zip(s_comb,mask) if y]))

	return fund, harmon, comb

def fit_function(x, B, mu, sigma):
    return (B * np.exp(-1.0 * (x - mu)**2 / (2 * sigma**2)))

bins=np.arange(0.08,5,0.05);
binscenters = np.array([0.5 * (bins[i] + bins[i+1]) for i in range(len(bins)-1)])

efund, eharmon, ecomb = freq_type(data,'eB')
mfund, mharmon, mcomb = freq_type(data,'mB')
lfund, lharmon, lcomb = freq_type(data,'lB')

fig,[ax1,ax2,ax3] = plt.subplots(3,1,sharex=True)

ax1.set_title('late O/early B')
ax2.set_title('mid-B')
ax3.set_title('late B/early A')

ax1.hist(efund, bins=bins, alpha = 1.0, color= 'b',label='Fund. freq.')
ax2.hist(mfund, bins=bins, alpha = 1.0, color= 'g')
ax3.hist(lfund, bins=bins, alpha = 1.0, color= 'r')

edata, _, _ = ax1.hist(eharmon, bins=bins, histtype=u'step', color= 'b',label='Harmonics')
mdata, _, _ = ax2.hist(mharmon, bins=bins, histtype=u'step', color= 'g')
ldata, _, _ = ax3.hist(lharmon, bins=bins, histtype=u'step', color= 'r')
e_popt, _ = curve_fit(fit_function, xdata=binscenters, ydata=edata, p0=[2.0, 0.5, 1.0]); print e_popt
m_popt, _ = curve_fit(fit_function, xdata=binscenters, ydata=mdata, p0=[2.0, 0.5, 1.0]); print m_popt
l_popt, _ = curve_fit(fit_function, xdata=binscenters, ydata=ldata, p0=[2.0, 0.5, 1.0]); print l_popt
ax1.plot(bins, fit_function(bins, *e_popt), 'b')
ax2.plot(bins, fit_function(bins, *m_popt), 'g') 
#ax2.plot(bins/8, fit_function(bins, *m_popt), 'w--'); 
ax3.plot(bins, fit_function(bins, *l_popt), 'r')
#ax3.plot(bins/7, fit_function(bins, *l_popt), 'w--'); 

ax1.hist(ecomb, bins=bins, alpha = 0.2, color= 'b',label='Comb. freq.')
ax2.hist(mcomb, bins=bins, alpha = 0.2, color= 'g')
ax3.hist(lcomb, bins=bins, alpha = 0.2, color= 'r')

plt.xlim(bins[0]-0.01,bins[-1]+0.01)
ax1.legend(loc=1)

fig.text(0.5,0.06,'Frequency (c/d)', ha="center", va="center")
fig.text(0.06,0.5,'Counts', ha="center", va="center", rotation=90)

plt.show()

###################################################





from LPT_routines import *
from LPT_plotting import *
import matplotlib.pyplot as plt
import os
from paths import *
import numpy as np
from astropy.io import ascii

filename = 'Olya2'
#filename = 'LaPlata_input'

input_file = ascii.read(filename)
input_file['RA'], input_file['DEC'] = to_deg(input_file['RA'],input_file['DEC'])

data = {}

photo_cats = {k:v for k, v in PHOTO_CATS.items() if v['act'] > 0}
data['photo_tab'], data['filt_tab'] = getPhot(input_file['RA'], input_file['DEC'],photo_cats)


data['mod_tabs'] = {}
data['mod_tabs']['powr'] = modelTab(data['filt_tab'], models = 'powr')
data['mod_tabs']['kurucz'] = modelTab(data['filt_tab'], models = 'kurucz')

ext_files = ['HAUCKE+19','ext_prop','FRASER+10']
data['dist_tab'] = XmExtCol(input_file['RA'], input_file['DEC'],ext_files=ext_files,ext_col='DIST',\
			    fill_nan_viz='vizier:I/347/gaia2dis',viz_col='rest')
data['teff_tab'] = XmExtCol(input_file['RA'], input_file['DEC'],ext_files=ext_files,ext_col='TEFF')
data['logg_tab'] = XmExtCol(input_file['RA'], input_file['DEC'],ext_files=ext_files,ext_col='LOGG')

SED = PdFSEDs('SEDs_%s' % filename,data,1,sed_fit=True,lambda_fit_thres=1.5e+5,fit_bodies=['psph','hd','wd']) # Olya
#SED = PdFSEDs('SEDs_%s' % filename,data,4,sed_fit=True,lambda_fit_thres=3e+4,fit_bodies=['psph']) #LaPlata input

for s in range(len(input_file)): SED.plot(s,input_file['STAR'][s])

SED.close()


########################################################


class PdfSectorAnalysis(object):

	def __init__(self,pdf_name,plot_num):

		self.pdf_name = pdf_name
		self.pdf = PdfPages(self.pdf_name)
		self.plot_num = plot_num

		self.ind = 0

		return

	def plot(self,
		tpf,
		mask_thres_star = 0.1,
		thr_bckg = 0.0001,
		star = 'DUMMY',
		pca = 1,
		ndeg = 2,
		gaia = False,
		gaia_source = None
         	):

		bk_mask = ~tpf.create_threshold_mask(thr_bckg, reference_pixel=None)
		bk_lc = tpf.to_lightcurve(aperture_mask=bk_mask).remove_nans()

		Gaia3_tpf = Gaia(tpf,cat='Gaia3')
		RA_pix, DE_pix, BPRP, RP, Ga_IDs = Gaia3_tpf.get_prop()
		if gaia_source != None :
			star_ind = np.where(Ga_IDs == gaia_source)
			star_row = int(DE_pix[star_ind] - tpf.row); star_col = int(RA_pix[star_ind] - tpf.column)
		else:
			star_col = int(0.5*tpf.shape[1]) ; star_row = int(0.5*tpf.shape[2])

		print('Finding mask for sector...')
		mask = getmask(tpf,star_row,star_col,thres=mask_thres_star)

		print('Extracting, correcting, normalizing LC...')		
		raw_lc    = tpf.to_lightcurve(aperture_mask=mask).remove_nans()
		corrected_lc1 = lccor(tpf, mask, bk_mask,pca)
		x=corrected_lc1.time; y=corrected_lc1.flux		
		yfit,yfit_norm = fit_pol(x,y,ndeg)

		print('Saving files for sector..')
		save_mask(mask,TESS_MASK_PATH+'%s_%s_MASK' % (star,tpf.sector))
		save_two_col(x,y,TESS_LC_PATH+'%s_%s_LC_p%s' % (star,tpf.sector,pca))
		save_two_col(x,yfit_norm,TESS_LC_PATH+'%s_%s_nLC_p%sn%s' % (star,tpf.sector,pca,ndeg))

		if self.ind % self.plot_num == 0:
			self.fig = plt.figure(figsize=(9,11))
			self.gs = GridSpec(self.plot_num,3, figure=self.fig, hspace=0.3, wspace=0.4)

		plot_ind = self.ind % self.plot_num
		ax1 = self.fig.add_subplot(self.gs[plot_ind, 0])

		ax2 = self.fig.add_subplot(self.gs[plot_ind, 1])
		div = make_axes_locatable(ax2)
		ax3 = div.append_axes("bottom", "100%", pad=0.)

		ax4 = self.fig.add_subplot(self.gs[plot_ind, 2])
		div2 = make_axes_locatable(ax4)
		ax5 = div2.append_axes("bottom", "100%", pad=0.)

		print('Plotting for sector...')
		tpf.plot(ax=ax1,aperture_mask=mask,mask_color='#FD110D',show_colorbar=False,\
			bkg_mask=bk_mask,bkg_mask_color='w')

		if gaia:
			up_mark = 64
			rp_min = np.where(RP == min(RP))
			RPdiff =  RP - RP[rp_min]
			gaia_sizes = up_mark / 2**RPdiff
			ax1.scatter(RA_pix,DE_pix,s=gaia_sizes, marker='.', c='c')
			if gaia_source != None : ax1.scatter(RA_pix[star_ind],DE_pix[star_ind],s=up_mark,marker='x',color='c',linewidths=2)

		raw_lc.normalize().plot(ax=ax2,color='r',ylabel='Norm. flux')
		bk_lc.normalize().plot(ax=ax3,color='0.5',ylabel='Norm. flux')
		ax4.plot(x,y,'k'); ax4.plot(x,yfit,'r'); ax4.set_ylabel('Norm. flux')
		ax5.plot(x,yfit_norm,'g'); ax5.invert_yaxis();

		ax2.set_xlabel('');ax2.set_xticklabels([]);ax4.set_xlabel('');ax4.set_xticklabels([])
		ax1.set_title(star); ax2.set_title('sector %d' % tpf.sector); ax4.set_title('%s %s' % (tpf.ra,tpf.dec))

		self.ind += 1
		if self.ind % self.plot_num == 0: self.pdf.savefig(self.fig); plt.clf(); plt.close(self.fig)
		

		return

	def close(self):

		if self.ind % self.plot_num != 0: self.pdf.savefig(self.fig)

		plt.clf(); plt.close('all')
		self.pdf.close()

		return

#######################################################

class PdfMultiRevA(object):

	def __init__(self,pdf_name,plot_num):

		self.pdf_name = pdf_name
		self.pdf = PdfPages(self.pdf_name)
		self.plot_num = plot_num

		self.ind = 0

		return

	def plot(self,
		tpf,
		mask_thres_star = 0.1,
		thr_bckg = 0.0001,
		star_n = '',
		tpf_n = '',
		gaia = False,
		gaia_source = ''
		):

		bk_mask = ~tpf.create_threshold_mask(thr_bckg, reference_pixel=None)
		bk_lc = tpf.to_lightcurve(aperture_mask=bk_mask).remove_nans()


		rayl = 1 / (tpf.time[-1] - tpf.time[0])

		if gaia:
			Gaia3_tpf = Gaia(tpf,cat='Gaia3')
			RA_pix, DE_pix, BPRP, RP, Ga_IDs = Gaia3_tpf.get_prop()
			star_ind = np.where(Ga_IDs == gaia_source)
			star_row = int(DE_pix[star_ind] - tpf.row); star_col = int(RA_pix[star_ind] - tpf.column) 

			mask = getmask(tpf,star_row,star_col,thres=mask_thres_star)

			'''
			glob_frequency, glob_power, glob_peaks, peaks_array = frequencies(tpf,mask,bk_mask,peak_thres=5,pca_comp = 1)

			counter=[]
			for g in glob_peaks:
				
				count = 0
				for p in peaks_array :
					cond = abs(g - p) < np.sqrt(2)*rayl 
					if True in cond.tolist() : count += 1
				counter.append(count/float(len(peaks_array)))

			plt.plot(glob_frequency, glob_power)
			
			print counter, glob_peaks

			for g,c in zip(glob_peaks,counter):			
				plt.axvline(g, c=str(1-c))

			plt.show()
			'''
		
			#fig_0, ax_0 = plt.subplots(2)


			#loc_lc, = ax_0[0].plot(cor_cen_lc.time,cor_cen_lc.flux,'k--')

			#pg = cor_cen_lc.to_periodogram(oversample_factor=100); ax_0[1].plot(pg.frequency,pg.power,'k--')

			#dt = np.median(cor_cen_lc.time[1:]-cor_cen_lc.time[:-1])

		raw_lc    = tpf.to_lightcurve(aperture_mask=mask).remove_nans()

		corrected_lc1 = lccor(tpf,mask,bk_mask,1)
		corrected_lc2 = lccor(tpf,mask,bk_mask,2)
		corrected_lc3 = lccor(tpf,mask,bk_mask,3)

		if self.ind % self.plot_num == 0:
			self.fig = plt.figure(figsize=(9,11))
			self.gs = GridSpec(self.plot_num,3, figure=self.fig, hspace=0.2, wspace=0.3)

		plot_ind = self.ind % self.plot_num
		ax1 = self.fig.add_subplot(self.gs[plot_ind, 0])
		ax3 = self.fig.add_subplot(self.gs[plot_ind, 1])
		div = make_axes_locatable(ax3)
		ax2 = div.append_axes("top", "100%", pad=0,)
		ax4 = div.append_axes("bottom", "100%", pad=0.)
		ax5 = self.fig.add_subplot(self.gs[plot_ind, 2])

		tpf.plot(ax=ax1,aperture_mask=mask,mask_color='#FD110D',show_colorbar=False,
			bkg_mask=bk_mask,bkg_mask_color='w')

		if gaia:
			up_mark = 64
			rp_min = np.where(RP == min(RP))
			RPdiff =  RP - RP[rp_min]
			gaia_sizes = up_mark / 2**RPdiff
			ax1.scatter(RA_pix,DE_pix,s=gaia_sizes, marker='.', c='c')
			ax1.scatter(RA_pix[star_ind],DE_pix[star_ind],s=up_mark,marker='x',color='c',linewidths=2)

		(corrected_lc1.normalize()-0.02).plot(ax=ax2,color='g',xlabel='',ylabel='')
		corrected_lc2.normalize().plot(ax=ax2,color='k',xlabel='',ylabel='')
		(corrected_lc3.normalize()+0.02).plot(ax=ax2,color='c',xlabel='',ylabel='')
		raw_lc.normalize().plot(ax=ax3,color='r',xlabel='')
		bk_lc.normalize().plot(ax=ax4,color='0.5',ylabel='')
		ax2.set_xlabel('');ax2.set_xticklabels([]);ax3.set_xlabel('');ax3.set_xticklabels([])

		rgr = tpf.flux[:, bk_mask]
		for j in np.arange(3) : ax5.plot(raw_lc.time,dmatr(rgr,3)[j] + 0.2*j, '.')

		ax1.set_title(star_n); ax2.set_title('sector %d' % tpf.sector); ax5.set_title(tpf_n)

		self.ind += 1
		if self.ind % self.plot_num == 0: self.pdf.savefig(self.fig); plt.clf(); plt.close(self.fig)

		return

	def close(self):

		if self.ind % self.plot_num != 0: self.pdf.savefig(self.fig)

		plt.clf(); plt.close('all')
		self.pdf.close()

		return

#################################################




class PdFLS(object):

	def __init__(self,pdf_name):

		self.pdf_name = pdf_name
		self.pdf = PdfPages(self.pdf_name)
		self.plot_num = 4

		return

	def prw(self,
		time,
		flux,
		star_sec,
		tolerance=3e-2
		):

		#flux = set_nans(time, flux)
		lc = lk.LightCurve(time=time,flux=flux).remove_nans()

		prw_lc = lc.copy()
		pg = prw_lc.to_periodogram()
		model = pg.model(time=prw_lc.time * u.day,frequency=pg.frequency_at_max_power)
		max_glob = max(pg.power)
		pfreq_v = []; f_label_v=[]; res_change_v = []

		mod_f = pd.DataFrame({"DATE":lc.time, "FLUX":lc.flux})
		ls_f = pd.DataFrame({"FREQUENCY":pg.frequency})

		rayl = 1/(time[-1]-time[0])
		std_res_change = 1
		ind = 0

		while std_res_change > tolerance :			

			if ind % self.plot_num == 0:
				self.fig = plt.figure(figsize=(10,12))
				gs = GridSpec(self.plot_num, 2, figure=self.fig, hspace=0.3, wspace=0.4)

			plot_ind = ind % self.plot_num
			ax1 = self.fig.add_subplot(gs[plot_ind, 0])
			ax2 = self.fig.add_subplot(gs[plot_ind, 1])
			div = make_axes_locatable(ax2)
			ax3 = div.append_axes("bottom", "40%", pad=0.)

			p_freq = pg.frequency_at_max_power.value
			pfreq_v.append(p_freq)
			f_label_v.append('F%s' % ind)


			pg.plot(ax=ax1); ax1.axvline(p_freq,color='r',ymin=0.9,ymax=1); ax1.set_ylim(1e-6,None) ; ax1.set_yscale('log')  
			ax1.set_xlim(3e-3,100); ax1.set_xscale('log') 
			ax1.text(0.5,0.85,'F%s %s' % (ind,p_freq),color='r',size=7,transform=ax1.transAxes)
			ax1.hlines(max_glob,xmin=p_freq,xmax=p_freq+rayl,color='r')
			ax1.axvline(2*rayl,ls='-',lw=0.3)

			nan_ind = np.isnan(pg.power)
			popt, pcov = curve_fit(self.redn,pg.frequency[~nan_ind],pg.power[~nan_ind])
			ax1.plot(pg.frequency,self.redn(pg.frequency,*popt))
			print popt

	

			lc.plot(ax=ax2,c='k'); model.plot(ax=ax2,c='r',ylabel=r'$\Delta$m (mag)',label='')
			ax2.invert_yaxis(); 

			prw_res = lc.copy()
			prw_res.flux = lc.flux - model.flux
			prw_res.plot(ax=ax3,c='k', ylabel='residuals'); ax3.invert_yaxis() 
			std_res_new = np.std(prw_res.flux)

			try:
				std_res_change = abs(std_res_new - std_res_old) / std_res_old
				ax3.text(0.05,0.05,'%.3f' % std_res_change, color='r', size=7, transform = ax3.transAxes)
				res_change_v.append('%.3f' % std_res_change)
			except:
				res_change_v.append(np.nan)

			ls_f["P%s_%s" % (ind,p_freq)] = pg.power 		
			mod_f["M%s_%s" % (ind,p_freq)] = model.flux

			std_res_old = std_res_new

			pg = prw_res.to_periodogram()
			model.flux = model.flux + pg.model(time=prw_res.time * u.day, frequency=pg.frequency_at_max_power).flux

			ind += 1
			if ind % self.plot_num == 0: 
				self.pdf.savefig(self.fig)
				self.fig.clf(); plt.close(self.fig)



		if ind % self.plot_num != 0: self.pdf.savefig(self.fig)

		ident_v = find_harmon(pfreq_v,rayl)

		with open(TESS_FREQ_PATH+'%s_FREQ' % star_sec,'w') as freq_f:
			for i,j,k,m in zip(f_label_v,pfreq_v,res_change_v,ident_v):
    				freq_f.write("%s %s %s %s\n" % (i,j,k,m))
		freq_f.close()

		mod_f.to_csv(TESS_MODEL_PATH+'%s_MODEL' % star_sec, index=False)
		ls_f.to_csv(TESS_FREQ_PATH+'%s_LSS' % star_sec, index=False)

		return 

	def redn(self,x,w,zero,tau,gamma):
		x = np.array(x)
		return w + ( zero / ( 1 + (2 * 3.14 * tau * x)**gamma))

	def close(self):

		self.fig.clf(); plt.close(self.fig)
		self.pdf.close()

		return

##########################################################

from astropy import units as u
import pandas as pd
from astroquery.xmatch import XMatch
import numpy as np
import lightkurve as lk
from paths import *
from LPT_routines import *
from astropy.io import ascii
from astropy.coordinates import SkyCoord
from astroquery.mast import Tesscut
from astroquery.mast import Observations

pd.set_option('display.max_rows', 1000); pd.set_option('display.max_columns', 1000)
input_file = ascii.read('LaPlata_input_SPOC')
input_file['RA'], input_file['DEC'] = to_deg(input_file['RA'],input_file['DEC'])

print input_file
TESS = XMatch.query(cat1=input_file, cat2='vizier:IV/39/tic82',  max_distance=2*u.arcsec, colRA1='RA', colDec1='DEC')
TESS = pd.DataFrame(np.array(TESS))

for st,i,j,t in zip(TESS.STAR,TESS.RA, TESS.DEC, TESS.TIC):
        print '%s %s,%s,TIC %s' % (st,i,j,t)
	#print Tesscut.get_sectors(SkyCoord(ra=i,dec=j,unit='deg'))
	#try:
	#	lk.search_tesscut('TIC %s' % t).download_all(quality_bitmask='default',download_dir = TESS_TPF_PATH, cutout_size=20)
	#	print 'downloaded TPFs..'
	#obs_table = Observations.query_criteria(obs_collection=['Tess'],objectname='TIC %s' % t, radius=0, filetype="lightcurve")
	#data_products = Observations.get_product_list(obs_table)
	#print data_products
	#	lc_stat = lk.search_lightcurvefile('TIC %s' % t,mission='TESS')
	#	print lc_stat; lc_stat.download_all(quality_bitmask='default',download_dir = TESS_TPF_PATH)
	#	print 'downloaded LCs..'
	#except:
	#	print 'skipped'
	#	pass

###########################################################

import numpy as np
import matplotlib.pyplot
import matplotlib.pyplot as plt
import lightkurve as lk
import os
import gc
from paths import *
from LPT_plotting import *
from LPT_routines import *
import pandas as pd
import astropy.units as u


file_fold = os.listdir('DATA/')
data = to_deg('targets')
rayl = 1 / 25.

for  ra, dec, simbtp in zip(data['RA'],data['DEC'],data['SIMBTP']):

	prg_files = [j for j in file_fold if (str(ra)[:6] in j) and (str(dec)[:6] in j) and ('PGR' in j)]
	#print ra, dec, simbtp


	for prg_f in prg_files :

		freq, power = read_prg('DATA/'+prg_f)
		cond = np.logical_and(5 > freq, freq > 2 * rayl)
		freq = freq[cond]; power = power[cond]

		maxfreq = freq[np.argmax(power)]
		if simbtp == 'eB': 
			plt.plot(1/maxfreq,1,'ro')
		elif  simbtp == 'mB': 
			plt.plot(1/maxfreq,2,'go')
		elif  simbtp == 'lB': 
			plt.plot(1/maxfreq,3,'bo')

plt.show()

###########################################################

import numpy as np
import matplotlib.pyplot
import matplotlib.pyplot as plt
import lightkurve as lk
import os
import gc
from paths import *
from LPT_plotting import *
from LPT_routines import *
import pandas as pd
import astropy.units as u


file_fold = os.listdir('DATA/')
data = to_deg('targets')
rayl = 1 / 25.

for  ra, dec, tmag in zip(data['RA'],data['DEC'],data['TMAG']):

	peak_files = [j for j in file_fold if (str(ra)[:6] in j) and (str(dec)[:6] in j) and ('PEAKS' in j)]
	for peak_f in peak_files :

		glob_peaks, loc_peaks = read_peak('DATA/'+peak_f)

		for g in glob_peaks:
			count = 0
			print g
			for l in loc_peaks :
				cond = abs(g - l) < np.sqrt(2)*rayl 
				if True in cond.tolist() : count += 1
			plt.plot(tmag,count/float(len(loc_peaks)),'kx')

plt.show()

##############################################################


import lightkurve as lk
from astroquery.mast import Observations
import astropy.units as u

radius = .0001 * u.arcsec
project = 'TESS'

obs = Observations.query_criteria(objectname='TIC 391624171',
                                              radius=str(radius.to(u.deg)),
                                              project=project,
                                              obs_collection=project)

print Observations.get_product_list(obs)

#print lk.search_lightcurvefile('TIC 191450569',mission='TESS')

#'TIC 191450569'   #Retrieved
#'TIC 391624171'




